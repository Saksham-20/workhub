{"ast":null,"code":"import api from './api';\nclass ProfileService {\n  // Get current user's profile\n  static async getProfile() {\n    try {\n      console.log('ProfileService: Fetching profile...');\n      const response = await api.get('/profile/me');\n      console.log('ProfileService: Response received:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('ProfileService: Error fetching profile:', error);\n      throw error;\n    }\n  }\n\n  // Update current user's profile\n  static async updateProfile(profileData) {\n    try {\n      const response = await api.put('/profile/me', profileData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Upload profile picture\n  static async uploadProfilePicture(pictureUrl) {\n    try {\n      const response = await api.post('/profile/me/picture', {\n        profile_picture: pictureUrl\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get profile statistics\n  static async getProfileStats() {\n    try {\n      const response = await api.get('/profile/me/stats');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get public profile of another user\n  static async getPublicProfile(userId) {\n    try {\n      const response = await api.get(`/profile/${userId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Search freelancers\n  static async searchFreelancers(filters = {}) {\n    try {\n      const response = await api.get('/profile/search/freelancers', {\n        params: filters\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Search clients\n  static async searchClients(filters = {}) {\n    try {\n      const response = await api.get('/profile/search/clients', {\n        params: filters\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\nexport default ProfileService;","map":{"version":3,"names":["api","ProfileService","getProfile","console","log","response","get","data","error","updateProfile","profileData","put","uploadProfilePicture","pictureUrl","post","profile_picture","getProfileStats","getPublicProfile","userId","searchFreelancers","filters","params","searchClients"],"sources":["/Users/nishantpuri/Desktop/workhub/workhub/frontend/src/services/profileService.js"],"sourcesContent":["import api from './api';\n\nclass ProfileService {\n  // Get current user's profile\n  static async getProfile() {\n    try {\n      console.log('ProfileService: Fetching profile...');\n      const response = await api.get('/profile/me');\n      console.log('ProfileService: Response received:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('ProfileService: Error fetching profile:', error);\n      throw error;\n    }\n  }\n\n  // Update current user's profile\n  static async updateProfile(profileData) {\n    try {\n      const response = await api.put('/profile/me', profileData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Upload profile picture\n  static async uploadProfilePicture(pictureUrl) {\n    try {\n      const response = await api.post('/profile/me/picture', { profile_picture: pictureUrl });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get profile statistics\n  static async getProfileStats() {\n    try {\n      const response = await api.get('/profile/me/stats');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get public profile of another user\n  static async getPublicProfile(userId) {\n    try {\n      const response = await api.get(`/profile/${userId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Search freelancers\n  static async searchFreelancers(filters = {}) {\n    try {\n      const response = await api.get('/profile/search/freelancers', { params: filters });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Search clients\n  static async searchClients(filters = {}) {\n    try {\n      const response = await api.get('/profile/search/clients', { params: filters });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default ProfileService;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,cAAc,CAAC;EACnB;EACA,aAAaC,UAAUA,CAAA,EAAG;IACxB,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClD,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,aAAa,CAAC;MAC7CH,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEC,QAAQ,CAACE,IAAI,CAAC;MAChE,OAAOF,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,aAAaC,aAAaA,CAACC,WAAW,EAAE;IACtC,IAAI;MACF,MAAML,QAAQ,GAAG,MAAML,GAAG,CAACW,GAAG,CAAC,aAAa,EAAED,WAAW,CAAC;MAC1D,OAAOL,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,aAAaI,oBAAoBA,CAACC,UAAU,EAAE;IAC5C,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAML,GAAG,CAACc,IAAI,CAAC,qBAAqB,EAAE;QAAEC,eAAe,EAAEF;MAAW,CAAC,CAAC;MACvF,OAAOR,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,aAAaQ,eAAeA,CAAA,EAAG;IAC7B,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,mBAAmB,CAAC;MACnD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,aAAaS,gBAAgBA,CAACC,MAAM,EAAE;IACpC,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,YAAYY,MAAM,EAAE,CAAC;MACpD,OAAOb,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,aAAaW,iBAAiBA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3C,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,6BAA6B,EAAE;QAAEe,MAAM,EAAED;MAAQ,CAAC,CAAC;MAClF,OAAOf,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,aAAac,aAAaA,CAACF,OAAO,GAAG,CAAC,CAAC,EAAE;IACvC,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,yBAAyB,EAAE;QAAEe,MAAM,EAAED;MAAQ,CAAC,CAAC;MAC9E,OAAOf,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;AACF;AAEA,eAAeP,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}